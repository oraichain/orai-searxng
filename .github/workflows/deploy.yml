name: Notify Repo A on Developer Branch Push

run-name: deploy-${{ github.repository }}-${{ github.ref_name }}-${{ github.run_id }}

on:
  push:
    branches:
      - master
      - staging
    tags:
      - v*

jobs:
  build_and_deploy_k8s:
    if: github.ref_type == 'branch' && github.ref_name == 'staging'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref_name }}
      
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set Short Commit
        id: set_commit
        run: |
          echo "SHORT_COMMIT=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: ./container
          push: true
          tags: oraichain/orai-searxng:${{ github.ref_name }}.${{ env.SHORT_COMMIT }}

      - name: Install GH CLI
        run: |
          cat /etc/issue
          uname -a
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y
      - name: gh version
        run: |
          gh version


      - name: Install yq
        run: |
          command_exist=$(command -v "yq") || true
          current_user=$(whoami)
          if [ "$current_user" = "root" ]; then
            bin_path='/usr/local/bin'
          else
            mkdir -p ~/bin
            bin_path="$HOME/bin"
          fi
          if [ -z $command_exist ]; then
            wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O $bin_path/yq
            chmod +x $bin_path/yq
            export PATH="$HOME/bin:$PATH"
          fi
          yq --version


      - name: Update image tag
        env:
          PAT: ${{ secrets.PAT_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_TOKEN  }}
          APPROVAL_GH_TOKEN: ${{ secrets.APPROVAL_GH_TOKEN }}
          HELM_CHARTS_PATH: helm-charts/orai-searxng/values-staging-byteplus.yaml
          CHART_NAME: orai-searxng
          KEY: .image.tag
          ENV: staging

        run: |
          export TAG=${{ github.ref_name }}.${{ env.SHORT_COMMIT }}
          export PAT=${{ env.APPROVAL_GH_TOKEN }}
          export APPROVAL=${{ env.APPROVAL_GH_TOKEN }}
          export PATH="$HOME/bin:$PATH"

          git fetch --all
          git clone https://${GH_TOKEN}@github.com/oraichain/infra-deployments.git
          cd infra-deployments

          git checkout -b feat/update-$CHART_NAME-$ENV-tag-$TAG
          git config --global user.email "devops@orai.io"
          git config --global user.name "DevOps"
          git remote set-url origin https://${PAT}@github.com/oraichain/infra-deployments.git

          if [[ ! -f "${HELM_CHARTS_PATH}" ]]; then
            echo "❌ File ${HELM_CHARTS_PATH} don't exists !"
            exit 1
          fi
          yq eval -i "${KEY} = strenv(TAG)" "${HELM_CHARTS_PATH}"
          git commit -am "feat($CHART_NAME): update image tag in $ENV to $TAG"
          git push -fu origin feat/update-$CHART_NAME-$ENV-tag-$TAG
          PR_URL=$(gh pr list -H feat/update-$CHART_NAME-$ENV-tag-$TAG -B master --json url --jq '.[].url')
          if [[ -n "${PR_URL}" ]]; then
            echo "PR already exists -> ${PR_URL}"
          else
            gh pr create --title "Update $CHART_NAME image tag to $TAG in $ENV" --body "$ENV $TAG" -B master
          fi

          GH_TOKEN=$APPROVAL gh pr review -a feat/update-$CHART_NAME-$ENV-tag-$TAG -b "$ENV env will be auto approved"
          GH_TOKEN=$APPROVAL gh pr merge -d -s --body="$TAG will be synced to $ENV by ArgoCD" feat/update-$CHART_NAME-$ENV-tag-$TAG --admin


      - name: Notify discord
        uses: appleboy/discord-action@master
        env:
          CHART_NAME: orai-searxng
        with:
          webhook_id: ${{ secrets.DISCORD_WEBHOOK_ID_DISTILLEDAI }}
          webhook_token: ${{ secrets.DISCORD_WEBHOOK_TOKEN_DISTILLEDAI }}
          username: GitBot
          message: |
            :white_check_mark: Deployed **${{ env.CHART_NAME }}**
            • Ref: `${{ github.ref_name }}`
            • Commit: `${{ env.SHORT_COMMIT }}`
            • Status: success


      - name: Notify on deploy error
        if: failure()
        uses: appleboy/discord-action@master
        env:
          CHART_NAME: orai-searxng
        with:
          webhook_id: ${{ secrets.DISCORD_WEBHOOK_ID_DISTILLEDAI }}
          webhook_token: ${{ secrets.DISCORD_WEBHOOK_TOKEN_DISTILLEDAI }}
          username: GitBot
          message: |
            :x: Deployed **${{ env.CHART_NAME }}**
            • Ref: `${{ github.ref_name }}`
            • Commit: `${{ env.SHORT_COMMIT }}`
            • Status: failure
